"""addressbook.py
–§–∞–π–ª –º—ñ—Å—Ç–∏—Ç—å –∫–ª–∞—Å–∏ –¥–ª—è –º–æ–¥–µ–ª—é–≤–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–Ω–æ—ó –∫–Ω–∏–≥–∏:
Field: –ë–∞–∑–æ–≤–∏–π –∫–ª–∞—Å –¥–ª—è –ø–æ–ª—ñ–≤ –∑–∞–ø–∏—Å—É.
Name: –ö–ª–∞—Å –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ –∫–æ–Ω—Ç–∞–∫—Ç—É. –û–±–æ–≤'—è–∑–∫–æ–≤–µ –ø–æ–ª–µ.
Phone: –ö–ª–∞—Å –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É. –ú–∞—î –≤–∞–ª—ñ–¥–∞—Ü—ñ—é —Ñ–æ—Ä–º–∞—Ç—É (10 —Ü–∏—Ñ—Ä).
Record: –ö–ª–∞—Å –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ–Ω—Ç–∞–∫—Ç, –≤–∫–ª—é—á–∞—é—á–∏ —ñ–º'—è, —Å–ø–∏—Å–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ —Ç–∞ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è.
AddressBook: –ö–ª–∞—Å –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–ø–∏—Å–∞–º–∏.
*new Birthday: –ö–ª–∞—Å –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è. –ú–∞—î –≤–∞–ª—ñ–¥–∞—Ü—ñ—é —Ñ–æ—Ä–º–∞—Ç—É (YYYY-MM-DD).
"""
from collections import UserDict
from datetime import datetime, timedelta  # –Ü–º–ø–æ—Ä—Ç datetime –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –¥–∞—Ç–∏ –≤ –∫–ª–∞—Å—ñ Birthday —Ç–∞ timedelta –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –¥–Ω—ñ–≤ —Ç–∏–∂–Ω—è

class Field:
    def __init__(self, value):
        self.value = value

    def __str__(self):
        return str(self.value)

class Name(Field):
    pass

class Phone(Field):
    def __init__(self, value):
        if not value.isdigit() or len(value) != 10:
            raise ValueError("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –º–∞—î —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è —Ä—ñ–≤–Ω–æ –∑ 10 —Ü–∏—Ñ—Ä.")
        super().__init__(value)

class Birthday(Field): # üîπ –î–æ–¥–∞–Ω–æ –∫–ª–∞—Å Birthday
    def __init__(self, value):
        try:
            datetime.strptime(value, "%Y-%m-%d")  # –§–æ—Ä–º–∞—Ç YYYY-MM-DD
        except ValueError:
            raise ValueError("–ù–µ –≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD.")
        super().__init__(value)

class Record:
    def __init__(self, name, birthday=None):  # –î–æ–¥–∞–Ω–æ birthday 
        self.name = Name(name)
        self.phones = []
        self.birthday = Birthday(birthday) if birthday else None 

    def add_phone(self, phone):
        self.phones.append(Phone(phone))

    def remove_phone(self, phone):
        self.phones = [p for p in self.phones if p.value != phone]

    def edit_phone(self, old_phone, new_phone):
        for i, p in enumerate(self.phones):
            if p.value == old_phone:
                self.phones[i] = Phone(new_phone)
                return True
        return False

    def find_phone(self, phone):
        for p in self.phones:
            if p.value == phone:
                return p.value
        return None

    def __str__(self):
        phones = '; '.join(p.value for p in self.phones)
        bday = f", birthday: {self.birthday.value}" if self.birthday else ""
        return f"Contact name: {self.name.value}, phones: {phones}{bday}"

class AddressBook(UserDict):
    def add_record(self, record):
        self.data[record.name.value] = record

    def find(self, name):
        return self.data.get(name)

    def delete(self, name):
        if name in self.data:
            del self.data[name]

    def get_upcoming_birthdays(self): # get_upcoming_birthdays —ñ–∑ hw_03
        today = datetime.today().date()
        end_date = today + timedelta(days=7)
        congratulations = {}

        for record in self.data.values():
            if record.birthday: 
                try:
                    bday = datetime.strptime(record.birthday.value, "%Y-%m-%d").date()
                except ValueError:
                    continue  

                bday_this_year = bday.replace(year=today.year)
                if bday_this_year < today:
                    bday_this_year = bday.replace(year=today.year + 1)

                if today <= bday_this_year <= end_date:
                    day = bday_this_year.weekday()
                    if day in [5, 6]:  # –Ø–∫—â–æ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –ø—Ä–∏–ø–∞–¥–∞—î –Ω–∞ –≤–∏—Ö—ñ–¥–Ω–∏–π (—Å—É–±–æ—Ç–∞ –∞–±–æ –Ω–µ–¥—ñ–ª—è
                        bday_this_year += timedelta(days=(7 - day))
                    weekday = bday_this_year.strftime("%A")
                    congratulations.setdefault(weekday, []).append(record.name.value)

        return congratulations